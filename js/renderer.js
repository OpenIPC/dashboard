// --- renderer.js ---

(function(window) {
    'use strict';
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const App = {
        cameras: [],
        groups: [],
        gridState: [],
        layout: { cols: 2, rows: 2 },
        recordingStates: {},
        appSettings: {},
        t: (key) => key // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    };

    // –î–µ–ª–∞–µ–º App –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –º–æ–≥–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    window.App = App;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    App.i18n = AppModules.createI18n(App);
    App.modalHandler = AppModules.createModalHandler(App);
    App.cameraList = AppModules.createCameraList(App);
    App.gridManager = AppModules.createGridManager(App);
    App.archiveManager = AppModules.createArchiveManager(App);

    // –ü–æ–ª—É—á–∞–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const statusInfo = document.getElementById('status-info');

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–∞–º–µ—Ä—ã, –≥—Ä—É–ø–ø—ã, —Å–µ—Ç–∫–∞)
    async function loadConfiguration() {
        const config = await window.api.loadConfiguration();
        App.cameras = config.cameras || [];
        App.groups = config.groups || [];
        App.gridManager.setInitialState(config);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—É—Ç—å –∫ –∑–∞–ø–∏—Å—è–º –∏ —Ç.–¥.)
    async function loadAppSettings() {
        App.appSettings = await window.api.loadAppSettings();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
    async function saveConfiguration() {
        const config = {
            cameras: App.cameras,
            groups: App.groups,
            gridState: App.gridManager.getGridState(),
            layout: App.gridManager.getGridSize(),
        };
        await window.api.saveConfiguration(config);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
    async function toggleRecording(camera) {
        if (App.recordingStates[camera.id]) {
            await window.api.stopRecording(camera.id);
        } else {
            await window.api.startRecording(camera);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ –¶–ü –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –û–ó–£
    function updateSystemStats() {
        window.api.getSystemStats().then(stats => {
            statusInfo.textContent = `${App.t('status_cpu')}: ${stats.cpu}% | ${App.t('status_ram')}: ${stats.ram} MB`;
        });
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---

    window.api.onRecordingStateChange(({ cameraId, recording }) => {
        App.recordingStates[cameraId] = recording;
        App.cameraList.updateRecordingState(cameraId, recording);
        App.gridManager.updateRecordingState(cameraId, recording);
    });

    window.api.onStreamDied(uniqueStreamIdentifier => {
        App.gridManager.handleStreamDeath(uniqueStreamIdentifier);
    });
    
    window.api.onStreamStats(({ uniqueStreamIdentifier, fps, bitrate }) => {
        const statsDiv = document.getElementById(`stats-${uniqueStreamIdentifier}`);
        if(statsDiv) {
            statsDiv.textContent = `${Math.round(fps)}fps, ${Math.round(bitrate)}kbps`;
        }
    });

    // --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    async function init() {
        await loadAppSettings();
        await App.i18n.init();

        App.saveConfiguration = saveConfiguration;
        App.toggleRecording = toggleRecording;

        await loadConfiguration();
        
        App.modalHandler.init();
        App.cameraList.init();
        App.gridManager.init();
        App.archiveManager.init();

        App.cameraList.render();
        await App.gridManager.render();
        
        setInterval(updateSystemStats, 3000);
        setInterval(() => App.cameraList.pollCameraStatuses(), 10000);
        updateSystemStats();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    init();

    // === –ù–û–í–´–ô –ö–û–î: –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–¢–£–°–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===
    (function() {
        const updateStatusInfo = document.createElement('div');
        updateStatusInfo.style.marginLeft = '15px';
        updateStatusInfo.style.fontSize = '12px';
        updateStatusInfo.style.color = 'var(--text-secondary)';
        
        const statusBar = document.getElementById('status-info').parentElement;
        if (statusBar) {
            statusBar.appendChild(updateStatusInfo);
        }

        window.api.onUpdateStatus(({ status, message }) => {
            console.log(`Update status: ${status}, message: ${message}`);
            
            switch (status) {
                case 'available':
                    updateStatusInfo.innerHTML = `üí° <span style="text-decoration: underline; cursor: help;" title="${message}">–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</span>`;
                    updateStatusInfo.style.color = '#ffc107';
                    break;
                case 'downloading':
                    updateStatusInfo.textContent = `‚è≥ ${message}`;
                    updateStatusInfo.style.color = '#17a2b8';
                    break;
                case 'downloaded':
                    updateStatusInfo.innerHTML = `‚úÖ <span style="text-decoration: underline; cursor: help;" title="${message}">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.</span>`;
                    updateStatusInfo.style.color = '#28a745';
                    break;
                case 'error':
                    updateStatusInfo.textContent = `‚ùå ${message}`;
                    updateStatusInfo.style.color = '#dc3545';
                    break;
                case 'latest':
                    updateStatusInfo.textContent = `üëç ${message}`;
                    setTimeout(() => { if (updateStatusInfo.textContent.includes(message)) updateStatusInfo.textContent = ''; }, 5000);
                    break;
                default:
                    updateStatusInfo.textContent = '';
                    break;
            }
        });
    })();

})(window);